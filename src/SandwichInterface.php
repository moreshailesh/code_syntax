<?php&#10/**&#10 * @file&#10 * Provides \Drupal\custom\SandwichInterface.&#10 *&#10 * When defining a new plugin type you need to define an interface that all&#10 * plugins of the new type will implement. This ensures that consumers of the&#10 * plugin type have a consistent way of accessing the plugin's functionality. It&#10 * should include access to any public properties, and methods for accomplishing&#10 * whatever business logic anyone accessing the plugin might want to use.&#10 *&#10 * For example, an image manipulation plugin might have a "process" method that&#10 * takes a known input, probably an image file, and returns the processed&#10 * version of the file.&#10 *&#10 * In our case we'll define methods for accessing the human readable description&#10 * of a sandwich and the number of calories per serving. As well as a method for&#10 * ordering a sandwich.&#10 */&#10namespace Drupal\custom;&#10&#10/**&#10 * An interface for all sandwich plugin types&#10 */&#10interface SandwichInterface {&#10  /**&#10   * Provides a description of a sandwich.&#10   *&#10   * @return string&#10   *   A string description of sandwich.&#10   */&#10  public function description();&#10&#10  /**&#10   * Provides the number of calories per sandwich.&#10   *&#10   * @return float&#10   *   Number of calories per sandwich.&#10   */&#10  public function calories();&#10&#10  /**&#10   * @param array $extras&#10   *   An array of extra ingredients to include with this sandwich.&#10   *&#10   * @return mixed&#10   */&#10  public function order(array $extras);&#10}&#10