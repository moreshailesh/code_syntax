<?php&#10namespace Drupal\custom;&#10&#10use Drupal\Component\Plugin\PluginBase;&#10&#10/**&#10 * Provides \Drupal\custom\SandwichBase.&#10 *&#10 * This is a helper class which makes it easier for other developers to&#10 * implement sandwich plugins in their own modules. In SandwichBase we provide&#10 * some generic methods for handling tasks that are common to pretty much all&#10 * sandwich plugins. Thereby reducing the amount of boilerplate code required to&#10 * implement a sandwich plugin.&#10 *&#10 * In this case both the description and calories properties can be read from&#10 * the @Sandwich annotation. In most cases it is probably fine to just use that&#10 * value without any additional processing. However, if an individual plugin&#10 * needed to provide special handling around either of these things it could&#10 * just override the method in that class definition for that plugin.&#10 *&#10 * We intentionally declare our base class as abstract, and skip the order()&#10 * method required by \Drupal\plugin_type_example\SandwichInterface. This way&#10 * even if they are using our base class, developers will always be required to&#10 * define an order() method for their custom sandwich type.&#10 *&#10 * @see \Drupal\custom\Annotation\Sandwich&#10 * @see \Drupal\custom\SandwichInterface&#10 */&#10 class SandwichBase extends PluginBase implements SandwichInterface {&#10   /**&#10    * Retrieve the @description property from the annotation and return it.&#10    *&#10    * @return string&#10    */&#10   public function description() {&#10     return $this->pluginDefinition['description'];&#10   }&#10&#10   /**&#10    * Retrieve the @calories property from the annotation and return it.&#10    *&#10    * @return float&#10    */&#10   public function calories() {&#10     return (float) $this->pluginDefinition['calories'];&#10   }&#10 }&#10